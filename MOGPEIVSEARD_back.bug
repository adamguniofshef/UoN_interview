model{
  
  Y_star ~ dmnorm(m_star, inverse(S_star)) # Y*|Yt ~ N_2(m*,S*)
  
  m_X_star_update <- t(sum_T_otimes_k_train_star) %*% inverse(S_train) %*% (Yt - m_X_train)
  
  m_star[1] <- m_X_star[1] + m_X_star_update[1] # m*_1
  
  m_star[2] <- m_X_star[2] + m_X_star_update[2] # m*_2
  
  S_X_star_update <- t(sum_T_otimes_k_train_star) %*% inverse(S_train) %*% sum_T_otimes_k_train_star

  S_star[1, 1] <- S_X_star[1, 1] - S_X_star_update[1, 1] # covariance matrix of Y*|Yt
  
  S_star[1, 2] <- S_X_star[1, 2] - S_X_star_update[1, 2]
  
  S_star[2, 1] <- S_star[1, 2]
  
  S_star[2, 2] <- S_X_star[2, 2] - S_X_star_update[2, 2]
  
  m_X_star <- alpha # prior mean of marginal distribution Y*
  
  S_X_star[1, 1] <- pow(sigma[1], 2) + pow(tau[1], 2) + pow(lambda[1] * tau[1], 2) # prior variance of marginal distribution Y*_1
  
  S_X_star[2, 2] <- pow(sigma[2], 2) + pow(tau[2], 2) + pow(lambda[2] * tau[2], 2) # prior variance of marginal distribution Y*_2
  
  S_X_star[1, 2] <- tau[1] * tau[2] * rho_T + lambda[1] * tau[1] * lambda[2] * tau[2] * rho_T # prior covvariance of Y*_1, Y*_2
  
  S_X_star[2, 1] <- S_X_star[1, 2] # prior covvariance of Y*_2, Y*_1
  
  for(i_1 in 1:n_m){              # adding the model error variance onto diagonal
                                  # elements of covariance matrices
                                  # T_1_otimes_K_1 and T_2_otimes_K_2
  
    S_train[i_1, i_1] <- pow(sigma[1], 2) + T_otimes_K_train[i_1, i_1, 1] + T_otimes_K_train[i_1, i_1, 2]    
    # diagonal elements of S (for first n_m diagonals)
    
    S_train[(i_1 + n_m),
            (i_1 + n_m)] <- pow(sigma[2], 2) + T_otimes_K_train[(i_1 + n_m),
                                                                (i_1 + n_m), 1] + T_otimes_K_train[(i_1 + n_m),
                                                                                                   (i_1 + n_m), 2]
    # diagonal elements of S (last n_m diagonals)
    
  }
  
  for(i_1 in 1:(2*n_m)){
  
    for(i_2 in (1+i_1):(2*n_m)){                      
    
      S_train[i_1, i_2] <- T_otimes_K_train[i_1, i_2, 1] + T_otimes_K_train[i_1, i_2, 2]
      
      # off-diagonal elements of S
      
      S_train[i_2, i_1] <- S_train[i_1, i_2]
    
    }
  
  }
  
  # Need to create the Kronecker products between
  # T_1 and K_1, T_1_otimes_K_1, and T_2 and K_2,
  # T_2_otimes_K_2
  # T_otimes_K_train is a 2*n_m by 2*n_m by 2 array, i.e. 2 matrix slices, each made up of four
  # n_m by n_m block matrices. First slice corresponds to T_1_otimes_K_1, second to T_2_otimes_K_2
  # For slice i , the top-left block matrix is the product between the
  # top-left element of T_i and the elements of K_i
  # the top-right block matrix is the product between the
  # top-right element of T_i and the elements of K_i
  # the bottom-left block matrix is the same
  # as the top-right block matrix
  # the bottom-right block matrix is the product between
  # the bottom-right element of T_i and the elements of K_i
  
  for(i_1 in 1:n_m){
  
    for(d_Y in 1:dim.Y){
    
    T_otimes_K_train[i_1, i_1, d_Y] <- T[1, 1, d_Y] * K_train[i_1, i_1, d_Y]                    
    # diagonal elements of top left block
    
    T_otimes_K_train[i_1, (i_1 + n_m), d_Y] <- T[1, 2, d_Y] * K_train[i_1, i_1, d_Y]           
    # diagonal elements of top right block
    
    T_otimes_K_train[(i_1 + n_m), i_1, d_Y] <- T[2, 1, d_Y] * K_train[i_1, i_1, d_Y]           
    # diagonal elements of bottom left block
    
    T_otimes_K_train[(i_1 + n_m), (i_1 + n_m), d_Y] <- T[2, 2, d_Y] * K_train[i_1, i_1, d_Y]   
    # diagonal elements of bottom right block
    
    for(i_2 in (i_1+1):n_m){
      
      T_otimes_K_train[i_1, i_2, d_Y] <- T[1, 1, d_Y] * K_train[i_1, i_2, d_Y]                            
      # upper triangular of top left block
      
      T_otimes_K_train[i_2, i_1, d_Y] <- T_otimes_K_train[i_1, i_2, d_Y]                            
      # lower triangular of top left block
      
      T_otimes_K_train[i_1, (i_2 + n_m), d_Y] <- T[1, 2, d_Y] * K_train[i_1, i_2, d_Y]                   
      # upper triangular of top right block
      
      T_otimes_K_train[i_2, (i_1 + n_m), d_Y] <- T_otimes_K_train[i_1, (i_2 + n_m), d_Y]          
      # lower triangular of top right block
      
      T_otimes_K_train[(i_1 + n_m), i_2, d_Y] <- T[2, 1, d_Y] * K_train[i_1, i_2, d_Y]                   
      # upper triangular of bottom left block
      
      T_otimes_K_train[(i_2 + n_m), i_1, d_Y] <- T_otimes_K_train[(i_1 + n_m), i_2, d_Y]          
      # lower triangular of bottom left block
      
      T_otimes_K_train[(i_1 + n_m), (i_2 + n_m), d_Y] <- T[2, 2, d_Y] * K_train[i_1, i_2, d_Y]           
      # upper triangular of bottom right block
      
      T_otimes_K_train[(i_2 + n_m), (i_1 + n_m), d_Y] <- T_otimes_K_train[i_1, (i_2 + n_m), d_Y]  
      # lower triangular of bottom right block
      
      }
      
    }
    
  }
  
  T[1, 1, 1] <- tau[1]^2
  
  T[2, 2, 1] <- tau[2]^2
  
  T[1, 2, 1] <- tau[1] * tau[2] * rho_T
  
  T[2, 1, 1] <- T[1, 2, 1]
  
  T[1, 1, 2] <- lambda[1]^2 * tau[1]^2
  
  T[2, 2, 2] <- lambda[2]^2 * tau[2]^2
  
  T[1, 2, 2] <- lambda[1] * tau[1] * lambda[2] * tau[2] * rho_T
  
  T[2, 1, 2] <- T[1, 2, 2]
  
  for(i_1 in 1:n_m){
  
    m_X_train[i_1] <- alpha[1] # prior mean of Yt_1
    
    m_X_train[i_1 + n_m] <- alpha[2] # prior mean of Yt_2
    
    for(d_Y in 1:dim.Y){
    
      for(d_X in 1:dim.X){
    
        X_train_X_star_squared[i_1, d_X, d_Y] <-  pow( ( Xt[i_1, d_X] - X_star[d_X] ) , 2 ) / l[d_Y, d_X]^2
    
      }
    
    sum_X_train_X_star_squared[i_1, d_Y] <- sum(X_train_X_star_squared[i_1, 1:dim.X, d_Y])
  
    k_train_star[i_1, d_Y] <- exp( -0.5 * sum_X_train_X_star_squared[i_1, d_Y] )
    
    T_otimes_k_train_star[i_1, 1, d_Y] <- T[1, 1, d_Y] * k_train_star[i_1, d_Y]                    
    # diagonal elements of top left block
    
    T_otimes_k_train_star[i_1, 2, d_Y] <- T[1, 2, d_Y] * k_train_star[i_1, d_Y]           
    # diagonal elements of top right block
    
    T_otimes_k_train_star[(i_1 + n_m), 1, d_Y] <- T_otimes_k_train_star[i_1, 2, d_Y]           
    # diagonal elements of bottom left block
    
    T_otimes_k_train_star[(i_1 + n_m), 2, d_Y] <- T[2, 2, d_Y] * k_train_star[i_1, d_Y]   
    # diagonal elements of bottom right block
    
    }
    
    sum_T_otimes_k_train_star[i_1, 1] <- T_otimes_k_train_star[i_1, 1, 1] + T_otimes_k_train_star[i_1, 1, 2]
    # diagonal elements of top left block
    
    sum_T_otimes_k_train_star[i_1, 2] <- T_otimes_k_train_star[i_1, 2, 1] + T_otimes_k_train_star[i_1, 2, 2]          
    # diagonal elements of top right block
    
    sum_T_otimes_k_train_star[(i_1 + n_m), 1] <- sum_T_otimes_k_train_star[i_1, 2]        
    # diagonal elements of bottom left block
    
    sum_T_otimes_k_train_star[(i_1 + n_m), 2] <- T_otimes_k_train_star[(i_1 + n_m), 2, 1] + T_otimes_k_train_star[(i_1 + n_m), 2, 2]   
    # diagonal elements of bottom right block
    
    for(d_Y in 1:dim.Y){
    
      K_train[i_1, i_1, d_Y] <- 1
    
        for(i_2 in (i_1+1):n_m){
    
         for(d_X in 1:dim.X){
    
           Xt_squared[i_1, i_2, d_X, d_Y] <- pow( Xt[i_1, d_X] - Xt[i_2, d_X] , 2) / l[d_Y, d_X]^2
    
          }
      
          sum_Xt_squared_scaled[i_1, i_2, d_Y] <- sum(Xt_squared[i_1, i_2, 1:dim.X, d_Y]) 
      
          K_train[i_1, i_2, d_Y] <- exp( -0.5 * sum_Xt_squared_scaled[i_1, i_2, d_Y] ) 
      
          K_train[i_2, i_1, d_Y] <- K_train[i_1, i_2, d_Y]
      
      }
      
    }
    
   }
   
   for(d_X in 1:dim.X){
  
    X_star[d_X] ~ dunif(-rho_X[d_X] + centre_X[d_X], rho_X[d_X] + centre_X[d_X])   # 1 uniform box
    
    # r_X_squared[d_X-1] <- (X_star[d_X] - centre_X[d_X-1])^2 / rho_X[d_X-1]^2            # 2 uniform ball rejection
      
    # r_X[d_X-1] <- r_prime_X^(1/dim.X) * rho_X[d_X-1]                                    # 3 uniform ball spherical
    
  }
  
  # sum_r_X_squared <- sum(r_X_squared[1:dim.X])      # 2          
  
  # I_X ~ dinterval(-sum_r_X_squared, -1)             # 2
  
  # r_prime_X ~ dunif(0,1)                            # 3                              
                                                                
  # theta_X ~ dunif(0, 2*pi)                          # 3          
                                                                
  # phi_X ~ dunif(0, pi)                              # 3          
                                                                  
  # X_star[1] <- r_X[1] * sin(phi_X) * cos(theta_X) + centre_X[1] # 3           
                                                                
  # X_star[2] <- r_X[2] * sin(phi_X) * sin(theta_X) + centre_X[2] # 3
  
  # X_star[3] <- r_X[3] * cos(phi_X) + centre_X[3]  # 3

}